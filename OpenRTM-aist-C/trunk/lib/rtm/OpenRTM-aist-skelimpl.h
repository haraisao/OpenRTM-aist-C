/* This is a template file generated by command */
/* rtorb-idl --skeleton-impl OpenRTM-aist.idl */
/* User must edit this file, inserting servant  */
/* specific code between markers. */

/*
 * Copyright (c) 2012, AIST.
 * All rights reserved. This program is made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * National Institute of Advanced Industrial Science and Technology (AIST)
 */
/*!
 * \file OpenRTM-aist-skelimpl.h
 * \brief IDLに記述された各種データやInterfaceがIDL-Compilerによりgenerateされ、各種servantやimplementation関数などの宣言などを行う。<BR>
 *        OpenRTM-aist-C内で実装に必要なInterfaceの[POA/Servant]に関する構造体(impl_POA_???_???)の中に、必要な変数などを追加実装している。
 * \author National Institute of Advanced Industrial Science and Technology (AIST)
 */

#ifndef OPENRTM_AIST_SKELIMPL_H
#define OPENRTM_AIST_SKELIMPL_H

#include "OpenRTM-aist.h"
#include <rtm/Properties.h>
#include <rtm/Port.h>
#include <rtm/RTComp.h>     
#include <rtm/ExecutionContext.h>        

/*** App-specific servant structures ***/
typedef struct {
    POA_SDOPackage_SDOSystemElement servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_SDOPackage_SDOSystemElement;

typedef struct {
    POA_SDOPackage_SDO servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_SDOPackage_SDO;

typedef struct {
    POA_SDOPackage_Configuration servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_SDOPackage_Configuration;

typedef struct {
    POA_SDOPackage_Monitoring servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_SDOPackage_Monitoring;

typedef struct {
    POA_SDOPackage_SDOService servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_SDOPackage_SDOService;

typedef struct {
    POA_SDOPackage_Organization servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_SDOPackage_Organization;

typedef struct {
    POA_RTC_ComponentAction servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_RTC_ComponentAction;

typedef struct {
    POA_RTC_LightweightRTObject servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_RTC_LightweightRTObject;

typedef struct {
    POA_RTC_ExecutionContext servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_RTC_ExecutionContext;

/*!
 * \struct impl_POA_RTC_PortService
 * \brief RTC_PortService用POAServant構造体
 * \param m_name [PortAdmin] getPortRef(), getPort()などで使用される、ユーザが設定したPortの名称
 * \param m_portProfile 内部保持用のRTC_PortProfile型データへのポインタ。PortService_get_port_profile()などで使用される。
 * \param m_InPortCdr InPort側においてPort接続時に生成される、InPortCdrのオブジェクトリファレンス。InPort型のPortServiceの場合は、当ポインタには自分、OutPort型PortServiceの場合は、接続相手のInPortCdrへのオブジェクトリファレンスがセットされる。
 * \param m_portBase DataPortの基本情報格納用のRTC_DataPortBase型構造体へのポインタ。各種処理で必要。
 */
typedef struct {
    POA_RTC_PortService servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    char *m_name;   /* [PortAdmin] getPortRef(), getPort(), ... */
    RTC_PortProfile *m_portProfile; 
    CORBA_OpenRTM_InPortCdr m_InPortCdr;  /* [InPort]: my InPortCdr, [OutPort]: Server's InPortCdr */ 
    RTC_DataPortBase *m_portBase;

    /* ------ ---------- end ------------ ------ */

} impl_POA_RTC_PortService;

/*!
 * \struct impl_POA_RTC_ExecutionContextService
 * \brief RTC_ExecutionContextService用POAServant構造体、これらの情報から[RTC_ExecutionContextProfile]も生成する。
 * \param m_ecProfile 内部保持のExecutionContextProfile情報。主に[kind(PERIODIC/EVENT_DRIVEN/OTHER)(通常[PERIODIC]で固定)][rate(ECの実行周波数[Hz])][owner(親となるRTC_RTObject型オブジェクトリファレンス)]をセットして保持。
 * \param m_running ECがstart/stopしているかのフラグ
 * \param m_states 現在のRTCの状態を表すRTC_LifeCycleState型enumデータ(CREATED/INACTIVE/ACTIVE/ERROR)
 * \param m_callback RTCが[m_states]のいずれかの状態にある時に、実施するAction用の関数ポインタをまとめたもの(entry/predo/do/postdo/exit)
 */
typedef struct {
    POA_RTC_ExecutionContextService servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */

    RTC_ExecutionContextProfile m_ecProfile; 
    CORBA_boolean m_running;  
    EC_State *m_states; 
    EC_Callback *m_callback;

    /* ------ ---------- end ------------ ------ */

} impl_POA_RTC_ExecutionContextService;

/*!
 * \struct impl_POA_RTC_RTObject
 * \brief RTC_RTObject用POAServant構造体、これが、RTCのBaseとなる。
 * \param m_properties RTCが持つ固有の情報(Default値/rtc.conf値/RTCのspec[]/...)などをひとまとめに格納しておくRTC_Properties型データ。各関数で必要なパラメータ抽出はここが大元となる。
 * \param m_portAdmin RTCがDataPortを持つ場合には、そのPortServiceのオブジェクトリファレンスが格納される。
 * \param m_rtobjRef 自分自身のRTC_RTObject型オブジェクトリファレンス 
 * \param m_dfcompRef 子として持つRTC_DataFlowComponentActionオブジェクトリファレンス 
 * \param m_ecRef 相関関係にあたる、ECのCORBA_RTC_ExecutionContextServiceオブジェクトリファレンス
 */
typedef struct {
    POA_RTC_RTObject servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    RTC_Properties *m_properties;
    RTC_PortAdmin *m_portAdmin;
    CORBA_RTC_RTObject  m_rtobjRef; 
    CORBA_RTC_DataFlowComponentAction  m_dfcompRef; 
    CORBA_RTC_ExecutionContextService  m_ecRef;

    /* ------ ---------- end ------------ ------ */

} impl_POA_RTC_RTObject;

/*!
 * \struct impl_POA_RTC_DataFlowComponentAction
 * \brief RTC_DataFlowComponentAction用POAServant構造体
 * \param m_rtobjRef 親となるRTC_RTObject型オブジェクトリファレンス 
 */
typedef struct {
    POA_RTC_DataFlowComponentAction servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    CORBA_RTC_RTObject  m_rtobjRef; 
    /* ------ ---------- end ------------ ------ */

} impl_POA_RTC_DataFlowComponentAction;

typedef struct {
    POA_RTC_DataFlowComponent servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_RTC_DataFlowComponent;

typedef struct {
    POA_OpenRTM_DataFlowComponent servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_OpenRTM_DataFlowComponent;

typedef struct {
    POA_OpenRTM_ExtTrigExecutionContextService servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_OpenRTM_ExtTrigExecutionContextService;

typedef struct {
    POA_RTM_Manager servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_RTM_Manager;

/*!
 * \struct impl_POA_OpenRTM_InPortCdr
 * \brief OpenRTM_InPortCdr用POAServant構造体で、DataPort接続時に必要となる
 * \param m_inport 自InPortに関連する情報が格納された、RTC_InPort型データへのポインタ
 * \param m_isNew OutPortから新規データが着いたかどうかのフラグ
 * \param m_buffer OutPortから着いたCdr型データ(put()がcallされた時の引数に相当)を、次のデータの上書き防止のためのバッファ用ポインタ.
 */
typedef struct {
    POA_OpenRTM_InPortCdr servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    RTC_InPort *m_inport;
    int m_isNew;  
    OpenRTM_CdrData *m_buffer;

    /* ------ ---------- end ------------ ------ */

} impl_POA_OpenRTM_InPortCdr;

typedef struct {
    POA_OpenRTM_OutPortCdr servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_OpenRTM_OutPortCdr;


/*** Implementation stub prototypes ***/
void impl_SDOPackage_SDOSystemElement__destroy(
  impl_POA_SDOPackage_SDOSystemElement *servant,
  CORBA_Environment *ev);

SDOPackage_OrganizationList*
impl_SDOPackage_SDOSystemElement_get_owned_organizations(
  impl_POA_SDOPackage_SDOSystemElement *servant,
  CORBA_Environment *ev);

void impl_SDOPackage_SDO__destroy(
  impl_POA_SDOPackage_SDO *servant,
  CORBA_Environment *ev);

SDOPackage_UniqueIdentifier
impl_SDOPackage_SDO_get_sdo_id(
  impl_POA_SDOPackage_SDO *servant,
  CORBA_Environment *ev);

CORBA_string
impl_SDOPackage_SDO_get_sdo_type(
  impl_POA_SDOPackage_SDO *servant,
  CORBA_Environment *ev);

SDOPackage_DeviceProfile*
impl_SDOPackage_SDO_get_device_profile(
  impl_POA_SDOPackage_SDO *servant,
  CORBA_Environment *ev);

SDOPackage_ServiceProfileList*
impl_SDOPackage_SDO_get_service_profiles(
  impl_POA_SDOPackage_SDO *servant,
  CORBA_Environment *ev);

SDOPackage_ServiceProfile*
impl_SDOPackage_SDO_get_service_profile(
  impl_POA_SDOPackage_SDO *servant,
  const CORBA_char * id,
  CORBA_Environment *ev);

SDOPackage_SDOService
impl_SDOPackage_SDO_get_sdo_service(
  impl_POA_SDOPackage_SDO *servant,
  const CORBA_char * id,
  CORBA_Environment *ev);

SDOPackage_Monitoring
impl_SDOPackage_SDO_get_monitoring(
  impl_POA_SDOPackage_SDO *servant,
  CORBA_Environment *ev);

SDOPackage_OrganizationList*
impl_SDOPackage_SDO_get_organizations(
  impl_POA_SDOPackage_SDO *servant,
  CORBA_Environment *ev);

SDOPackage_NVList*
impl_SDOPackage_SDO_get_status_list(
  impl_POA_SDOPackage_SDO *servant,
  CORBA_Environment *ev);

CORBA_any*
impl_SDOPackage_SDO_get_status(
  impl_POA_SDOPackage_SDO *servant,
  const CORBA_char * nme,
  CORBA_Environment *ev);

SDOPackage_Configuration
impl_SDOPackage_SDO_get_configuration(
  impl_POA_SDOPackage_SDO *servant,
  CORBA_Environment *ev);

SDOPackage_OrganizationList*
impl_SDOPackage_SDO_get_owned_organizations(
    impl_POA_SDOPackage_SDO *servant,
    CORBA_Environment *ev);

void impl_SDOPackage_Configuration__destroy(
  impl_POA_SDOPackage_Configuration *servant,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_set_device_profile(
  impl_POA_SDOPackage_Configuration *servant,
  SDOPackage_DeviceProfile* dProfile,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_add_service_profile(
  impl_POA_SDOPackage_Configuration *servant,
  SDOPackage_ServiceProfile* sProfile,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_add_organization(
  impl_POA_SDOPackage_Configuration *servant,
  SDOPackage_Organization organization_object,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_remove_service_profile(
  impl_POA_SDOPackage_Configuration *servant,
  const CORBA_char * id,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_remove_organization(
  impl_POA_SDOPackage_Configuration *servant,
  const CORBA_char * organization_id,
  CORBA_Environment *ev);

SDOPackage_ParameterList*
impl_SDOPackage_Configuration_get_configuration_parameters(
  impl_POA_SDOPackage_Configuration *servant,
  CORBA_Environment *ev);

SDOPackage_NVList*
impl_SDOPackage_Configuration_get_configuration_parameter_values(
  impl_POA_SDOPackage_Configuration *servant,
  CORBA_Environment *ev);

CORBA_any*
impl_SDOPackage_Configuration_get_configuration_parameter_value(
  impl_POA_SDOPackage_Configuration *servant,
  const CORBA_char * name,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_set_configuration_parameter(
  impl_POA_SDOPackage_Configuration *servant,
  const CORBA_char * name,
  CORBA_any* value,
  CORBA_Environment *ev);

SDOPackage_ConfigurationSet*
impl_SDOPackage_Configuration_get_configuration_set(
  impl_POA_SDOPackage_Configuration *servant,
  const CORBA_char * config_id,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_set_configuration_set_values(
  impl_POA_SDOPackage_Configuration *servant,
  SDOPackage_ConfigurationSet* configuration_set,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_add_configuration_set(
  impl_POA_SDOPackage_Configuration *servant,
  SDOPackage_ConfigurationSet* configuration_set,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_remove_configuration_set(
  impl_POA_SDOPackage_Configuration *servant,
  const CORBA_char * config_id,
  CORBA_Environment *ev);

SDOPackage_ConfigurationSetList*
impl_SDOPackage_Configuration_get_configuration_sets(
  impl_POA_SDOPackage_Configuration *servant,
  CORBA_Environment *ev);

SDOPackage_ConfigurationSet*
impl_SDOPackage_Configuration_get_active_configuration_set(
  impl_POA_SDOPackage_Configuration *servant,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Configuration_activate_configuration_set(
  impl_POA_SDOPackage_Configuration *servant,
  const CORBA_char * config_id,
  CORBA_Environment *ev);

void impl_SDOPackage_Monitoring__destroy(
  impl_POA_SDOPackage_Monitoring *servant,
  CORBA_Environment *ev);

void impl_SDOPackage_SDOService__destroy(
  impl_POA_SDOPackage_SDOService *servant,
  CORBA_Environment *ev);

void impl_SDOPackage_Organization__destroy(
  impl_POA_SDOPackage_Organization *servant,
  CORBA_Environment *ev);

SDOPackage_UniqueIdentifier
impl_SDOPackage_Organization_get_organization_id(
  impl_POA_SDOPackage_Organization *servant,
  CORBA_Environment *ev);

SDOPackage_OrganizationProperty*
impl_SDOPackage_Organization_get_organization_property(
  impl_POA_SDOPackage_Organization *servant,
  CORBA_Environment *ev);

CORBA_any*
impl_SDOPackage_Organization_get_organization_property_value(
  impl_POA_SDOPackage_Organization *servant,
  const CORBA_char * name,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Organization_add_organization_property(
  impl_POA_SDOPackage_Organization *servant,
  SDOPackage_OrganizationProperty* organization_property,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Organization_set_organization_property_value(
  impl_POA_SDOPackage_Organization *servant,
  const CORBA_char * name,
  CORBA_any* value,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Organization_remove_organization_property(
  impl_POA_SDOPackage_Organization *servant,
  const CORBA_char * name,
  CORBA_Environment *ev);

SDOPackage_SDOSystemElement
impl_SDOPackage_Organization_get_owner(
  impl_POA_SDOPackage_Organization *servant,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Organization_set_owner(
  impl_POA_SDOPackage_Organization *servant,
  SDOPackage_SDOSystemElement sdo,
  CORBA_Environment *ev);

SDOPackage_SDOList*
impl_SDOPackage_Organization_get_members(
  impl_POA_SDOPackage_Organization *servant,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Organization_set_members(
  impl_POA_SDOPackage_Organization *servant,
  SDOPackage_SDOList* sdos,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Organization_add_members(
  impl_POA_SDOPackage_Organization *servant,
  SDOPackage_SDOList* sdo_list,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Organization_remove_member(
  impl_POA_SDOPackage_Organization *servant,
  const CORBA_char * id,
  CORBA_Environment *ev);

SDOPackage_DependencyType
impl_SDOPackage_Organization_get_dependency(
  impl_POA_SDOPackage_Organization *servant,
  CORBA_Environment *ev);

CORBA_boolean
impl_SDOPackage_Organization_set_dependency(
  impl_POA_SDOPackage_Organization *servant,
  SDOPackage_DependencyType dependency,
  CORBA_Environment *ev);

void impl_RTC_ComponentAction__destroy(
  impl_POA_RTC_ComponentAction *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ComponentAction_on_initialize(
  impl_POA_RTC_ComponentAction *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ComponentAction_on_finalize(
  impl_POA_RTC_ComponentAction *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ComponentAction_on_startup(
  impl_POA_RTC_ComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ComponentAction_on_shutdown(
  impl_POA_RTC_ComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ComponentAction_on_activated(
  impl_POA_RTC_ComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ComponentAction_on_deactivated(
  impl_POA_RTC_ComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ComponentAction_on_aborting(
  impl_POA_RTC_ComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ComponentAction_on_error(
  impl_POA_RTC_ComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ComponentAction_on_reset(
  impl_POA_RTC_ComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

void impl_RTC_LightweightRTObject__destroy(
  impl_POA_RTC_LightweightRTObject *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_initialize(
  impl_POA_RTC_LightweightRTObject *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_finalize(
  impl_POA_RTC_LightweightRTObject *servant,
  CORBA_Environment *ev);

CORBA_boolean
impl_RTC_LightweightRTObject_is_alive(
  impl_POA_RTC_LightweightRTObject *servant,
  RTC_ExecutionContext exec_context,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_exit(
  impl_POA_RTC_LightweightRTObject *servant,
  CORBA_Environment *ev);

RTC_ExecutionContextHandle_t
impl_RTC_LightweightRTObject_attach_context(
  impl_POA_RTC_LightweightRTObject *servant,
  RTC_ExecutionContext exec_context,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_detach_context(
  impl_POA_RTC_LightweightRTObject *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ExecutionContext
impl_RTC_LightweightRTObject_get_context(
  impl_POA_RTC_LightweightRTObject *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ExecutionContextList*
impl_RTC_LightweightRTObject_get_owned_contexts(
  impl_POA_RTC_LightweightRTObject *servant,
  CORBA_Environment *ev);

RTC_ExecutionContextList*
impl_RTC_LightweightRTObject_get_participating_contexts(
  impl_POA_RTC_LightweightRTObject *servant,
  CORBA_Environment *ev);

RTC_ExecutionContextHandle_t
impl_RTC_LightweightRTObject_get_context_handle(
  impl_POA_RTC_LightweightRTObject *servant,
  RTC_ExecutionContext cxt,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_on_initialize(
    impl_POA_RTC_LightweightRTObject *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_on_finalize(
    impl_POA_RTC_LightweightRTObject *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_on_startup(
    impl_POA_RTC_LightweightRTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_on_shutdown(
    impl_POA_RTC_LightweightRTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_on_activated(
    impl_POA_RTC_LightweightRTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_on_deactivated(
    impl_POA_RTC_LightweightRTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_on_aborting(
    impl_POA_RTC_LightweightRTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_on_error(
    impl_POA_RTC_LightweightRTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_LightweightRTObject_on_reset(
    impl_POA_RTC_LightweightRTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

void impl_RTC_ExecutionContext__destroy(
  impl_POA_RTC_ExecutionContext *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContext_stop(
  impl_POA_RTC_ExecutionContext *servant,
  CORBA_Environment *ev);

CORBA_double
impl_RTC_ExecutionContext_get_rate(
  impl_POA_RTC_ExecutionContext *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContext_set_rate(
  impl_POA_RTC_ExecutionContext *servant,
  CORBA_double rate,
  CORBA_Environment *ev);

RTC_ExecutionKind
impl_RTC_ExecutionContext_get_kind(
  impl_POA_RTC_ExecutionContext *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContext_add_component(
  impl_POA_RTC_ExecutionContext *servant,
  RTC_LightweightRTObject comp,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContext_remove_component(
  impl_POA_RTC_ExecutionContext *servant,
  RTC_LightweightRTObject comp,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContext_reset_component(
  impl_POA_RTC_ExecutionContext *servant,
  RTC_LightweightRTObject comp,
  CORBA_Environment *ev);

CORBA_boolean
impl_RTC_ExecutionContext_is_running(
  impl_POA_RTC_ExecutionContext *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContext_start(
  impl_POA_RTC_ExecutionContext *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContext_activate_component(
  impl_POA_RTC_ExecutionContext *servant,
  RTC_LightweightRTObject comp,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContext_deactivate_component(
  impl_POA_RTC_ExecutionContext *servant,
  RTC_LightweightRTObject comp,
  CORBA_Environment *ev);

RTC_LifeCycleState
impl_RTC_ExecutionContext_get_component_state(
  impl_POA_RTC_ExecutionContext *servant,
  RTC_LightweightRTObject comp,
  CORBA_Environment *ev);

void impl_RTC_PortService__destroy(
  impl_POA_RTC_PortService *servant,
  CORBA_Environment *ev);

RTC_PortProfile*
impl_RTC_PortService_get_port_profile(
  impl_POA_RTC_PortService *servant,
  CORBA_Environment *ev);

RTC_ConnectorProfileList*
impl_RTC_PortService_get_connector_profiles(
  impl_POA_RTC_PortService *servant,
  CORBA_Environment *ev);

RTC_ConnectorProfile*
impl_RTC_PortService_get_connector_profile(
  impl_POA_RTC_PortService *servant,
  const CORBA_char * connector_id,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_PortService_disconnect(
  impl_POA_RTC_PortService *servant,
  const CORBA_char * connector_id,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_PortService_disconnect_all(
  impl_POA_RTC_PortService *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_PortService_connect(
  impl_POA_RTC_PortService *servant,
  RTC_ConnectorProfile* connector_profile,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_PortService_notify_connect(
  impl_POA_RTC_PortService *servant,
  RTC_ConnectorProfile* connector_profile,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_PortService_notify_disconnect(
  impl_POA_RTC_PortService *servant,
  const CORBA_char * connector_id,
  CORBA_Environment *ev);

void impl_RTC_ExecutionContextService__destroy(
  impl_POA_RTC_ExecutionContextService *servant,
  CORBA_Environment *ev);

RTC_ExecutionContextProfile*
impl_RTC_ExecutionContextService_get_profile(
  impl_POA_RTC_ExecutionContextService *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContextService_stop(
    impl_POA_RTC_ExecutionContextService *servant,
    CORBA_Environment *ev);

CORBA_double
impl_RTC_ExecutionContextService_get_rate(
    impl_POA_RTC_ExecutionContextService *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContextService_set_rate(
    impl_POA_RTC_ExecutionContextService *servant,
    CORBA_double rate,
    CORBA_Environment *ev);

RTC_ExecutionKind
impl_RTC_ExecutionContextService_get_kind(
    impl_POA_RTC_ExecutionContextService *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContextService_add_component(
    impl_POA_RTC_ExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContextService_remove_component(
    impl_POA_RTC_ExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContextService_reset_component(
    impl_POA_RTC_ExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

CORBA_boolean
impl_RTC_ExecutionContextService_is_running(
    impl_POA_RTC_ExecutionContextService *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContextService_start(
    impl_POA_RTC_ExecutionContextService *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContextService_activate_component(
    impl_POA_RTC_ExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_ExecutionContextService_deactivate_component(
    impl_POA_RTC_ExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

RTC_LifeCycleState
impl_RTC_ExecutionContextService_get_component_state(
    impl_POA_RTC_ExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

void impl_RTC_RTObject__destroy(
  impl_POA_RTC_RTObject *servant,
  CORBA_Environment *ev);

RTC_PortServiceList*
impl_RTC_RTObject_get_ports(
  impl_POA_RTC_RTObject *servant,
  CORBA_Environment *ev);

RTC_ComponentProfile*
impl_RTC_RTObject_get_component_profile(
  impl_POA_RTC_RTObject *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_on_initialize(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_on_finalize(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_on_startup(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_on_shutdown(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_on_activated(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_on_deactivated(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_on_aborting(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_on_error(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_on_reset(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_initialize(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_finalize(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

CORBA_boolean
impl_RTC_RTObject_is_alive(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContext exec_context,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_exit(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

RTC_ExecutionContextHandle_t
impl_RTC_RTObject_attach_context(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContext exec_context,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_RTObject_detach_context(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ExecutionContext
impl_RTC_RTObject_get_context(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ExecutionContextList*
impl_RTC_RTObject_get_owned_contexts(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

RTC_ExecutionContextList*
impl_RTC_RTObject_get_participating_contexts(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

RTC_ExecutionContextHandle_t
impl_RTC_RTObject_get_context_handle(
    impl_POA_RTC_RTObject *servant,
    RTC_ExecutionContext cxt,
    CORBA_Environment *ev);

SDOPackage_OrganizationList*
impl_RTC_RTObject_get_owned_organizations(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

SDOPackage_UniqueIdentifier
impl_RTC_RTObject_get_sdo_id(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

CORBA_string
impl_RTC_RTObject_get_sdo_type(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

SDOPackage_DeviceProfile*
impl_RTC_RTObject_get_device_profile(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

SDOPackage_ServiceProfileList*
impl_RTC_RTObject_get_service_profiles(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

SDOPackage_ServiceProfile*
impl_RTC_RTObject_get_service_profile(
    impl_POA_RTC_RTObject *servant,
    const CORBA_char * id,
    CORBA_Environment *ev);

SDOPackage_SDOService
impl_RTC_RTObject_get_sdo_service(
    impl_POA_RTC_RTObject *servant,
    const CORBA_char * id,
    CORBA_Environment *ev);

SDOPackage_Monitoring
impl_RTC_RTObject_get_monitoring(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

SDOPackage_OrganizationList*
impl_RTC_RTObject_get_organizations(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

SDOPackage_NVList*
impl_RTC_RTObject_get_status_list(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

CORBA_any*
impl_RTC_RTObject_get_status(
    impl_POA_RTC_RTObject *servant,
    const CORBA_char * nme,
    CORBA_Environment *ev);

SDOPackage_Configuration
impl_RTC_RTObject_get_configuration(
    impl_POA_RTC_RTObject *servant,
    CORBA_Environment *ev);

void impl_RTC_DataFlowComponentAction__destroy(
  impl_POA_RTC_DataFlowComponentAction *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_DataFlowComponentAction_on_execute(
  impl_POA_RTC_DataFlowComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_DataFlowComponentAction_on_state_update(
  impl_POA_RTC_DataFlowComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_DataFlowComponentAction_on_rate_changed(
  impl_POA_RTC_DataFlowComponentAction *servant,
  RTC_ExecutionContextHandle_t exec_handle,
  CORBA_Environment *ev);

void impl_RTC_DataFlowComponent__destroy(
  impl_POA_RTC_DataFlowComponent *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_DataFlowComponent_on_execute(
    impl_POA_RTC_DataFlowComponent *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_DataFlowComponent_on_state_update(
    impl_POA_RTC_DataFlowComponent *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTC_DataFlowComponent_on_rate_changed(
    impl_POA_RTC_DataFlowComponent *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

void impl_OpenRTM_DataFlowComponent__destroy(
  impl_POA_OpenRTM_DataFlowComponent *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_DataFlowComponent_on_execute(
    impl_POA_OpenRTM_DataFlowComponent *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_DataFlowComponent_on_state_update(
    impl_POA_OpenRTM_DataFlowComponent *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_DataFlowComponent_on_rate_changed(
    impl_POA_OpenRTM_DataFlowComponent *servant,
    RTC_ExecutionContextHandle_t exec_handle,
    CORBA_Environment *ev);

void impl_OpenRTM_ExtTrigExecutionContextService__destroy(
  impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
  CORBA_Environment *ev);

void
impl_OpenRTM_ExtTrigExecutionContextService_tick(
  impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_ExtTrigExecutionContextService_stop(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    CORBA_Environment *ev);

CORBA_double
impl_OpenRTM_ExtTrigExecutionContextService_get_rate(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_ExtTrigExecutionContextService_set_rate(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    CORBA_double rate,
    CORBA_Environment *ev);

RTC_ExecutionKind
impl_OpenRTM_ExtTrigExecutionContextService_get_kind(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_ExtTrigExecutionContextService_add_component(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_ExtTrigExecutionContextService_remove_component(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_ExtTrigExecutionContextService_reset_component(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

CORBA_boolean
impl_OpenRTM_ExtTrigExecutionContextService_is_running(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_ExtTrigExecutionContextService_start(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_ExtTrigExecutionContextService_activate_component(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

RTC_ReturnCode_t
impl_OpenRTM_ExtTrigExecutionContextService_deactivate_component(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

RTC_LifeCycleState
impl_OpenRTM_ExtTrigExecutionContextService_get_component_state(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    RTC_LightweightRTObject comp,
    CORBA_Environment *ev);

RTC_ExecutionContextProfile*
impl_OpenRTM_ExtTrigExecutionContextService_get_profile(
    impl_POA_OpenRTM_ExtTrigExecutionContextService *servant,
    CORBA_Environment *ev);

void impl_RTM_Manager__destroy(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_load_module(
  impl_POA_RTM_Manager *servant,
  const CORBA_char * pathname,
  const CORBA_char * initfunc,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_unload_module(
  impl_POA_RTM_Manager *servant,
  const CORBA_char * pathname,
  CORBA_Environment *ev);

RTM_ModuleProfileList*
impl_RTM_Manager_get_loadable_modules(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTM_ModuleProfileList*
impl_RTM_Manager_get_loaded_modules(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTM_ModuleProfileList*
impl_RTM_Manager_get_factory_profiles(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTC_RTObject
impl_RTM_Manager_create_component(
  impl_POA_RTM_Manager *servant,
  const CORBA_char * module_name,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_delete_component(
  impl_POA_RTM_Manager *servant,
  const CORBA_char * instance_name,
  CORBA_Environment *ev);

RTC_RTCList*
impl_RTM_Manager_get_components(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTC_ComponentProfileList*
impl_RTM_Manager_get_component_profiles(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTM_ManagerProfile*
impl_RTM_Manager_get_profile(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTM_NVList*
impl_RTM_Manager_get_configuration(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_set_configuration(
  impl_POA_RTM_Manager *servant,
  const CORBA_char * name,
  const CORBA_char * value,
  CORBA_Environment *ev);

CORBA_boolean
impl_RTM_Manager_is_master(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTM_ManagerList*
impl_RTM_Manager_get_master_managers(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_add_master_manager(
  impl_POA_RTM_Manager *servant,
  RTM_Manager mgr,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_remove_master_manager(
  impl_POA_RTM_Manager *servant,
  RTM_Manager mgr,
  CORBA_Environment *ev);

RTM_ManagerList*
impl_RTM_Manager_get_slave_managers(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_add_slave_manager(
  impl_POA_RTM_Manager *servant,
  RTM_Manager mgr,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_remove_slave_manager(
  impl_POA_RTM_Manager *servant,
  RTM_Manager mgr,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_fork(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_shutdown(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

RTC_ReturnCode_t
impl_RTM_Manager_restart(
  impl_POA_RTM_Manager *servant,
  CORBA_Environment *ev);

CORBA_Object
impl_RTM_Manager_get_service(
  impl_POA_RTM_Manager *servant,
  const CORBA_char * name,
  CORBA_Environment *ev);

void impl_OpenRTM_InPortCdr__destroy(
  impl_POA_OpenRTM_InPortCdr *servant,
  CORBA_Environment *ev);

OpenRTM_PortStatus
impl_OpenRTM_InPortCdr_put(
  impl_POA_OpenRTM_InPortCdr *servant,
  OpenRTM_CdrData* data,
  CORBA_Environment *ev);

void impl_OpenRTM_OutPortCdr__destroy(
  impl_POA_OpenRTM_OutPortCdr *servant,
  CORBA_Environment *ev);

OpenRTM_PortStatus
impl_OpenRTM_OutPortCdr_get(
  impl_POA_OpenRTM_OutPortCdr *servant,
  OpenRTM_CdrData** data,
  CORBA_Environment *ev);

#endif /* OPENRTM_AIST_SKELIMPL_H */
