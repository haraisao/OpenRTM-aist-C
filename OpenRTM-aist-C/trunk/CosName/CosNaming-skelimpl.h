/* This is a template file generated by command */
/* rtorb-idl --skeleton-impl CosNaming.idl */
/* User must edit this file, inserting servant  */
/* specific code between markers. */

#ifndef COSNAMING_SKELIMPL_H
#define COSNAMING_SKELIMPL_H

#include "CosNaming.h"

/*** App-specific servant structures ***/
typedef struct {
    POA_CosNaming_NamingContext servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_CosNaming_NamingContext;

typedef struct {
    POA_CosNaming_BindingIterator servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_CosNaming_BindingIterator;

typedef struct {
    POA_CosNaming_NamingContextExt servant;
    PortableServer_POA poa;

    /* ------ add private attributes here ------ */
    /* ------ ---------- end ------------ ------ */

} impl_POA_CosNaming_NamingContextExt;


/*** Implementation stub prototypes ***/
void impl_CosNaming_NamingContext__destroy(
  impl_POA_CosNaming_NamingContext *servant,
  CORBA_Environment *ev);

CORBA_boolean
impl_CosNaming_NamingContext__is_a(
  impl_POA_CosNaming_NamingContext *servant,
  const CORBA_char * id,
  CORBA_Environment *ev);

void
impl_CosNaming_NamingContext_bind(
  impl_POA_CosNaming_NamingContext *servant,
  CosNaming_Name* n,
  CORBA_Object obj,
  CORBA_Environment *ev);

void
impl_CosNaming_NamingContext_rebind(
  impl_POA_CosNaming_NamingContext *servant,
  CosNaming_Name* n,
  CORBA_Object obj,
  CORBA_Environment *ev);

void
impl_CosNaming_NamingContext_bind_context(
  impl_POA_CosNaming_NamingContext *servant,
  CosNaming_Name* n,
  CosNaming_NamingContext nc,
  CORBA_Environment *ev);

void
impl_CosNaming_NamingContext_rebind_context(
  impl_POA_CosNaming_NamingContext *servant,
  CosNaming_Name* n,
  CosNaming_NamingContext nc,
  CORBA_Environment *ev);

CORBA_Object
impl_CosNaming_NamingContext_resolve(
  impl_POA_CosNaming_NamingContext *servant,
  CosNaming_Name* n,
  CORBA_Environment *ev);

void
impl_CosNaming_NamingContext_unbind(
  impl_POA_CosNaming_NamingContext *servant,
  CosNaming_Name* n,
  CORBA_Environment *ev);

CosNaming_NamingContext
impl_CosNaming_NamingContext_new_context(
  impl_POA_CosNaming_NamingContext *servant,
  CORBA_Environment *ev);

CosNaming_NamingContext
impl_CosNaming_NamingContext_bind_new_context(
  impl_POA_CosNaming_NamingContext *servant,
  CosNaming_Name* n,
  CORBA_Environment *ev);

void
impl_CosNaming_NamingContext_destroy(
  impl_POA_CosNaming_NamingContext *servant,
  CORBA_Environment *ev);

void
impl_CosNaming_NamingContext_list(
  impl_POA_CosNaming_NamingContext *servant,
  CORBA_unsigned_long how_many,
  CosNaming_BindingList** bl,
  CosNaming_BindingIterator* bi,
  CORBA_Environment *ev);

void impl_CosNaming_BindingIterator__destroy(
  impl_POA_CosNaming_BindingIterator *servant,
  CORBA_Environment *ev);

CORBA_boolean
impl_CosNaming_BindingIterator_next_one(
  impl_POA_CosNaming_BindingIterator *servant,
  CosNaming_Binding** b,
  CORBA_Environment *ev);

CORBA_boolean
impl_CosNaming_BindingIterator_next_n(
  impl_POA_CosNaming_BindingIterator *servant,
  CORBA_unsigned_long how_many,
  CosNaming_BindingList** bl,
  CORBA_Environment *ev);

void
impl_CosNaming_BindingIterator_destroy(
  impl_POA_CosNaming_BindingIterator *servant,
  CORBA_Environment *ev);

void impl_CosNaming_NamingContextExt__destroy(
  impl_POA_CosNaming_NamingContextExt *servant,
  CORBA_Environment *ev);

CosNaming_NamingContextExt_StringName
impl_CosNaming_NamingContextExt_to_string(
  impl_POA_CosNaming_NamingContextExt *servant,
  CosNaming_Name* n,
  CORBA_Environment *ev);

CosNaming_Name*
impl_CosNaming_NamingContextExt_to_name(
  impl_POA_CosNaming_NamingContextExt *servant,
  const CORBA_char * sn,
  CORBA_Environment *ev);

CosNaming_NamingContextExt_URLString
impl_CosNaming_NamingContextExt_to_url(
  impl_POA_CosNaming_NamingContextExt *servant,
  const CORBA_char * addr,
  const CORBA_char * sn,
  CORBA_Environment *ev);

CORBA_Object
impl_CosNaming_NamingContextExt_resolve_str(
  impl_POA_CosNaming_NamingContextExt *servant,
  const CORBA_char * n,
  CORBA_Environment *ev);

CORBA_boolean
impl_CosNaming_NamingContextExt__is_a(
    impl_POA_CosNaming_NamingContextExt *servant,
    const CORBA_char * id,
    CORBA_Environment *ev);

void
impl_CosNaming_NamingContextExt_bind(
    impl_POA_CosNaming_NamingContextExt *servant,
    CosNaming_Name* n,
    CORBA_Object obj,
    CORBA_Environment *ev);

void
impl_CosNaming_NamingContextExt_rebind(
    impl_POA_CosNaming_NamingContextExt *servant,
    CosNaming_Name* n,
    CORBA_Object obj,
    CORBA_Environment *ev);

void
impl_CosNaming_NamingContextExt_bind_context(
    impl_POA_CosNaming_NamingContextExt *servant,
    CosNaming_Name* n,
    CosNaming_NamingContext nc,
    CORBA_Environment *ev);

void
impl_CosNaming_NamingContextExt_rebind_context(
    impl_POA_CosNaming_NamingContextExt *servant,
    CosNaming_Name* n,
    CosNaming_NamingContext nc,
    CORBA_Environment *ev);

CORBA_Object
impl_CosNaming_NamingContextExt_resolve(
    impl_POA_CosNaming_NamingContextExt *servant,
    CosNaming_Name* n,
    CORBA_Environment *ev);

void
impl_CosNaming_NamingContextExt_unbind(
    impl_POA_CosNaming_NamingContextExt *servant,
    CosNaming_Name* n,
    CORBA_Environment *ev);

CosNaming_NamingContext
impl_CosNaming_NamingContextExt_new_context(
    impl_POA_CosNaming_NamingContextExt *servant,
    CORBA_Environment *ev);

CosNaming_NamingContext
impl_CosNaming_NamingContextExt_bind_new_context(
    impl_POA_CosNaming_NamingContextExt *servant,
    CosNaming_Name* n,
    CORBA_Environment *ev);

void
impl_CosNaming_NamingContextExt_destroy(
    impl_POA_CosNaming_NamingContextExt *servant,
    CORBA_Environment *ev);

void
impl_CosNaming_NamingContextExt_list(
    impl_POA_CosNaming_NamingContextExt *servant,
    CORBA_unsigned_long how_many,
    CosNaming_BindingList** bl,
    CosNaming_BindingIterator* bi,
    CORBA_Environment *ev);

#endif
